@page "/shoppingcart"
@attribute [Authorize(Roles = "User")]
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TicketHive.Shared.Models;
@using TicketHive.Shared;
@inject IShoppingcartRepo shoppingcartRepo;
@inject NavigationManager navigationManager;
@inject ICurrencyRepo currencyRepo;
@inject IUserRepo userRepo;
@inject IEventRepo eventRepo;

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
<PageTitle>Shoppingcart</PageTitle>
<div id="TheDiv">

@if (cartExists && cartItems != null && cartItems.Count > 0)
    {
        <table id="thetable">

            <thead id="table-head">

                <tr id="head-display">
                    <th></th>
                    <th>Name</th>
                    <th>Change Amount Tickets?</th>
                    <th>Price</th>
                    <th></th>

                </tr>


            </thead>

            <tbody id="table-body">

                @if (cartItems.Count != 0)
                {
                    @foreach (var item in bookingViews)
                    {
                        <tr id="table-row">
                            <td><img id="img" src="/Images/@item.EventViewModel.Image" /></td>
                            <td id="item-display">@item.EventViewModel.EventName</td>
                            


                            <td>
                                <select id="input-combobox" @bind="item.Quantity">
                                    @for (int i = 1; i < 11; i++)
                                    {
                                        <option value=@i>@i.ToString()</option>
                                    }

                                </select>
                            </td>
                            <td>@Math.Round(BookingPrice(item.EventViewModel.PricePerTicket,item.Quantity),2) @currencyRepo.GetCurrencyCode()</td>
                            <td> <button id="btn" class="fas fa-trash-alt" style="background-color:red" type="button" @onclick="(() => RemoveFromCart(item.EventModelId))"></button> </td>
                           <h5>@Errormessage</h5>
                            

                        </tr>

                       
                    }
                    
                }
            </tbody>

            <tfoot id="tfoot">
                <tr >
                    <td colspan="4" style="text-align:right">Total Price:@Math.Round(TotalPrice(bookingViews),2) &nbsp; @currencyRepo.GetCurrencyCode()</td>
                    <td colspan="5" style="text-align:right">
                        <button id="btn" style="background-color:green" class="fas fa-handshake" type="button" value="Book Events" @onclick="AddBookingsToUser" >Book</button> 
                    </td>

                </tr>



            </tfoot>

        </table>

    }
    else if ( !cartExists || cartItems.Count() == 0)
    {
        <h1>No Items</h1>
    }

    
</div>

<div id="button-div">
    
</div>


@code {
    private List<BookingModel> cartItems = new();
    private List<BookingViewModel> bookingViews = new();
    private List<BookingModel> bookingsToAdd = new();
    private bool cartExists;

    private string Errormessage = "";

    protected override async Task OnInitializedAsync()
    {
        await currencyRepo.GetExchangeRates();

        cartExists = await shoppingcartRepo.CheckIfCartExists();
        await UpdateCartItems();
    }

    /// <summary>
    /// Removes item from cart and updates cart items
    /// </summary>
    /// <param name="eventId"></param>
    /// <returns></returns>
    private async Task RemoveFromCart(int eventId)
    {
        await shoppingcartRepo.RemoveFromCart(eventId);
        await UpdateCartItems();
    }

    /// <summary>
    /// Populates bookingsToAdd list, and creates a bookinginfomodel in order to add booking to user, updates available tickets for event and navigates to confirmation page
    /// </summary>
    /// <returns></returns>
    private async Task AddBookingsToUser()
    {

        PopulateBookingsToAdd();

        bool requirementsPassed = false;
        foreach (var item in bookingsToAdd)
        {
            if (item.Quantity != null && item.Quantity > 0)
            {

                UserModel eventDbUser = await userRepo.GetLoggedInUser();
                BookingInfoModel bookingInfo = new()
                    {
                        User = eventDbUser,
                        Booking = item
                    };
                if (item.Quantity <= bookingInfo.Booking.EventModel.AvailableTickets)
                {
                    if (!await userRepo.CheckIfUserHasBooking(item))
                    {
                        await eventRepo.UpdateAvailableEventTickets(item.EventModelId, item.Quantity);
                        await userRepo.AddBookingToUser(bookingInfo);
                        requirementsPassed = true;

                    }
                    else
                    {
                        Errormessage = "This item already exists";
                    }
                }
                else
                {
                    Errormessage = "Not enough available tickets";
                }


            }
            else
            {
                Errormessage = "Please select amount of tickets!";
            }

        }

        if (requirementsPassed)
        {
            await shoppingcartRepo.UpdateCart(bookingsToAdd);
            navigationManager.NavigateTo("/confirmation");
        }

    }

    /// <summary>
    /// Returns total price for a booking
    /// </summary>
    /// <param name="PricePerTicket"></param>
    /// <param name="quantity"></param>
    /// <returns></returns>
    public decimal BookingPrice(decimal PricePerTicket, int quantity)
    {
        return PricePerTicket * quantity;
    }

    /// <summary>
    /// Returns total price of cart items
    /// </summary>
    /// <param name="cartItems"></param>
    /// <returns></returns>
    private decimal TotalPrice(List<BookingViewModel> cartItems)
    {
        decimal totalPrice = 0;

        foreach (var item in cartItems)
        {
            totalPrice += BookingPrice(item.EventViewModel.PricePerTicket, item.Quantity);
        }
        return totalPrice;
    }

    ///  <summary>
    /// Sets cartItems to the localstorage "cart"
    /// </summary>
    /// <returns></returns>
    private async Task UpdateCartItems()
    {
        cartItems = await shoppingcartRepo.GetCartFromLocalStorage();
        await UpdateBookingViews();
    }

    ///  <summary>
    /// Populates bookingViews with bookings based on cartitems
    /// </summary>
    /// <returns></returns>
    private async Task UpdateBookingViews()
    {
        bookingViews.Clear();

        if (cartItems != null)
        {
            foreach (var item in cartItems)
            {
                var eventView = await eventRepo.GetEventView(item.EventModelId);

                BookingViewModel bookingView = new()
                    {
                        EventModelId = eventView.Id,
                        EventViewModel = await eventRepo.GetEventView(item.EventModelId),
                        Quantity = item.Quantity
                    };
                bookingViews.Add(bookingView);
            }
        }

    }

    ///  <summary>
    /// Populates booingstoadd list based on cart items and bookingview quantity which is bound to ui element
    /// </summary>
    private void PopulateBookingsToAdd()
    {
        foreach (var cartItem in cartItems)
        {
            var bookingView = bookingViews.FirstOrDefault(x => x.Id == cartItem.Id);

            BookingModel bookingModel = new()
                {
                    EventModelId = cartItem.EventModelId,
                    EventModel = cartItem.EventModel,
                    Quantity = bookingView.Quantity

                };

            bookingsToAdd.Add(bookingModel);
        }
    }
}
<style>
    #tfoot{
        background-color:white;
    }

    #button-div{
        position: absolute; 
        bottom: 0; 
        right: 0; 
        margin: 10px; 
       
    }
    #table-row{
        text-align:center;
        margin-left:10px;
    }
    #table-body{
        background-color:white;
        border-bottom: 2px solid black;
        padding: 20px 0;
    }
    #title{
        text-align:center;
        font-family:monospace;
        color: #305076
    }
    #img{
        margin-top:30px;
        margin-bottom:30px;
        max-width:300px;

    }
    #TheDiv{
        display:flex;
        justify-content:center;
        align-items:center;
        align-content:space-between;
        
        
    }
    #thetable{
        border-collapse:collapse;
        border-spacing:100px;
        width:65%;
        height:350px;
        
        
        
        
    }
    #table-head{
        background-color:grey;
        text-align:center;
    }
    tr{
        border-bottom: 2px solid black;
        padding: 20px 0;
        
    }

    #btn {
        
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 18px;
        cursor: pointer;
        transition: all 0.4s;
        position: relative;
    }
    #btn:hover{
        transform:translateY(-3px)
    }
    

    

    




</style>




         



           