@page "/booking"
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Shared.Models;
@inject ICurrencyRepo currencyRepo;
@inject IEventRepo eventrepo
@inject IUserRepo userRepo;
@attribute [Authorize(Roles = "User")]
<PageTitle>Booking</PageTitle>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />

<div>
    <form class="search-form m-2" role="search">
        <input class="form-control search-input" type="search" placeholder="Search" aria-label="Search" @bind-value="searchEvent" @oninput="HandleInput">
        
    </form>
</div>
<div id="btn-div">
    <button id="btn" style="margin-right:6px" class="fas fa-calendar" @onclick="SortDateByDescending"><i>&nbsp; Order By Date</i></button>
    <button id="btn" class="fas fa-coins" @onclick="OrderByPrice"><i>&nbsp; Order By Price</i></button>
</div>




@if (filteredEvents != null && filteredEvents.Any())
{
    <div class="row mb-5 row-cols-3 row-cols-md-3 g-4 center">
        @foreach (var events in filteredEvents)
        {

            if (events.AvailableTickets == 0)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-body" >
                            <img src="/Images/@events.Image" class="card-img-top" alt="...">
                            <h5 class="card-title" style="margin-top: 20px;">@events.EventName</h5>
                            <h1 class="text-danger text-center">SOLD OUT!</h1>
                            <a href="/event/@events.Id" class="btn btn-primary card-btn">Go to event</a>
                        </div>

                    </div>
                </div>
            }
            else
            {
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <img src="/Images/@events.Image" class="card-img-top" alt="...">
                            <h5 class="card-title" style="margin-top: 20px;">@events.EventName</h5>
                            <p class="card-text">@events.EventDetails</p>
                            <hr>
                            <h6 class="fas fa-calendar">&nbsp;@events.Date.ToShortDateString()</h6>
                            <p></p>
                            <h6 class="fas fa-coins">&nbsp;@Math.Round(events.PricePerTicket,2) &nbsp;@currencyRepo.GetCurrencyCode()</h6>
                            <hr>
                            <a href="/event/@events.Id" class="btn btn-primary card-btn">Go to event</a>
                        </div>
                    </div>
                </div>
            }
            
        }
    </div>
}
else
{
    <div class="row row-cols-3 row-cols-md-3 g-4">
        @foreach (var events in eventrepo.Events)
        {

            if (events.AvailableTickets == 0)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-body" style="background-color: gray">
                            <img src="/Images/@events.Image" class="card-img-top" alt="...">
                            <h5 class="card-title" style="margin-top: 20px;">@events.EventName</h5>
                            <hr>
                            <em>SOLD OUT!</em>
                            <a href="/event/@events.Id" class="btn btn-primary card-btn">Go to event</a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <img src="/Images/@events.Image" class="card-img-top" alt="...">
                            <h5 class="card-title" style="margin-top: 20px;">@events.EventName</h5>
                            <p class="card-text">@events.EventDetails</p>
                            <hr>
                            <h6 class="fas fa-calendar"> @events.Date.ToShortDateString()</h6>
                            <h6>Price: @events.PricePerTicket <h6>&nbsp;@currencyRepo.GetCurrencyCode()</h6></h6>
                            <a href="/event/@events.Id" class="btn btn-primary card-btn">Go to event</a>
                        </div>

                    </div>
                </div>
            }
            
        }

    </div>
}

@code {
    private List<EventViewModel> events = new List<EventViewModel>();
    private List<EventViewModel> filteredEvents = new List<EventViewModel>();
    private string searchEvent = "";

    //private double exchangeRate;


    /// <summary>
    /// Initializes the component with the exchange rate and events
    /// </summary>

    protected override async Task OnInitializedAsync()
    {
        
        await currencyRepo.GetExchangeRates();


        //exchangeRate = currencyRepo.GetExchangeRate();
        events = await eventrepo.GetAllEventViews();

        filteredEvents = events;

    }

    /// <summary>
    /// Handles the input change event and filters the events based on the search query
    /// </summary>

    private void HandleInput(ChangeEventArgs e)
    {
        searchEvent = e.Value.ToString();
        if (string.IsNullOrEmpty(searchEvent))
        {
            filteredEvents = events;
        }
        else
        {

            filteredEvents = events
            .Where(e => e.EventName.ToLower().Contains(searchEvent.ToLower())
            || e.EventType.ToLower().Contains(searchEvent.ToLower())
            || e.EventPlace.ToLower().Contains(searchEvent.ToLower()))
            .ToList();

        }
    }

    /// <summary>
    /// Clears the search query and resets the filtered events to the original events
    /// </summary>

    private void ClearSearch()
    {
        searchEvent = "";
        filteredEvents = events;
    }

    /// <summary>
    /// Sorts the events by date in descending order
    /// </summary>

    private void SortDateByDescending()
    {

        if (string.IsNullOrEmpty(searchEvent))
        {
            filteredEvents = filteredEvents.OrderBy(c => c.Date).ToList();
        }
        else
        {
            filteredEvents = filteredEvents.OrderBy(c => c.Date)
                .Where(e => e.EventName.ToLower().Contains(searchEvent.ToLower())
                || e.EventType.ToLower().Contains(searchEvent.ToLower())
                || e.EventPlace.ToLower().Contains(searchEvent.ToLower()))
                .ToList();
        }

    }    

    /// <summary>
    /// Sorts the events by price in ascending order
    /// </summary>
    private void OrderByPrice()
    {

        if (string.IsNullOrEmpty(searchEvent))
        {
            filteredEvents = filteredEvents.OrderBy(c => c.PricePerTicket).ToList();
        }
        else
        {
            filteredEvents = filteredEvents.OrderBy(c => c.PricePerTicket)
                .Where(e => e.EventName.ToLower().Contains(searchEvent.ToLower())
                || e.EventType.ToLower().Contains(searchEvent.ToLower())
                || e.EventPlace.ToLower().Contains(searchEvent.ToLower()))
                .ToList();
        }
        
    }
}


<style>
    .search-form {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .search-input {
        width: 20%;
        margin-right: 10px;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        align-items: stretch;
    }

    .card {
        flex: 1 1 300px;
        margin: 10px;
        height: 100%;
        overflow: hidden;
    }

    .card:hover{
            transform: scale(1.05);
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    .card-title {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .card-btn {
        margin:auto;
        position: absolute;
        bottom: 10px;
        left: 10px;
    }

    .input[type="submit"]:hover {
        transform: translateY(-6px);
    }

    #btn {
        background-color: #305076;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 18px;
        cursor: pointer;
        transition: all 0.4s;
        position: relative;
    }
    #btn:hover{
        transform:translateY(-6px)
    }
    #btn-div{
        display:flex;
        justify-content:center;
        align-content:center;
        
    }



</style>


