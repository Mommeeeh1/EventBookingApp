@page "/user-page"
@using TicketHive.Shared.Enums
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using TicketHive.Shared.Models;
@using TicketHive.Shared;
@attribute [Authorize(Roles = "User")]
@inject AuthenticationStateProvider authStateProvider
@inject IUserRepo userRepo
@inject ICurrencyRepo currencyRepo;
@inject NavigationManager navigationManager

<PageTitle>User</PageTitle>
    
  <body>
    <div class="card mx-auto" style="width: 18rem;">
        <EditForm Model="@changePasswordModel" OnValidSubmit="@(async() => await HandleValidSubmit())">
            <DataAnnotationsValidator />

            <div class="card-body">
                <div class="col text-center">
                    <label for="old-password-input">Old Password:</label>
                    <InputText @bind-Value="@changePasswordModel.OldPassword" id="old-password-input" type="password" asp-for="oldPassword" />
                    <ValidationMessage For="@(() => changePasswordModel.OldPassword)" />
                </div>
            </div>
         
            <div class="card-body">
                <div class="col text-center">
                    <label for="new-password-input">New Password:</label>
                    <InputText @bind-Value="@changePasswordModel.NewPassword" id="new-password-input" type="password" asp-for="Password" />
                    <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-danger">@errorMessage</p>
                    }
                </div>
            </div>
            <div class="text-center">
                <input id="savePassword-id" type="submit" value="Save password" class="btn-savechanges" />
            </div>
        </EditForm>

        @if (passwordChangeModal == true)
        {
            <div class="modal" tabindex="-1" role="dialog" style="display:block">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <divid id="modal-header" class="modal-header">
                            <h5 id="modal-title" class="modal-title">Changes</h5>
                            <button class="btn btn-close" data-dismiss="modal" @onclick="CloseConfirmation">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </divid>
                        <div class="modal-body">
                            <p>Your password have been updated!</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-success" @onclick="Confirm">Yes</button>
                            <button type="button" class="btn btn-danger" @onclick="CloseConfirmation" data-dismiss="modal">No</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="card-body">
            <div class="col text-center">
                <label for="new-country-input">Change country:</label>

                    
            <EditForm Model="@changeUserCountryModel" OnValidSubmit="@(async () => await HandleCountrySubmit())">
                <InputSelect id="input-combobox" @bind-Value=@changeUserCountryModel.UserCountry>
                    @foreach (var country in Enum.GetValues(typeof(Countries)))
                    {
                        <option value=@country>@country.ToString().Replace("_", " ")</option>
                    }
                </InputSelect>
                <div class="text-center">
                    <input id="saveCountry-id" type="submit" value="Save country" class="btn-savechanges" />
                </div>
            </EditForm>
            </div>
        </div>

        @if (countryChangeModal == true)
        {
            <div class="modal" tabindex="-1" role="dialog" style="display:block">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <divid id="modal-header" class="modal-header">
                            <h5 id="modal-title" class="modal-title">Changes</h5>
                            <button class="btn btn-close" data-dismiss="modal" @onclick="CloseConfirmation">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </divid>
                        <div class="modal-body">
                            <p>Your coutry have been updated!</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-success" @onclick="Confirm">Yes</button>
                            <button type="button" class="btn btn-danger" @onclick="CloseConfirmation" data-dismiss="modal">No</button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>

  </body>


@code {
    public ChangePasswordModel changePasswordModel { get; set; } = new();
    public ChangeUserCountryModel changeUserCountryModel { get; set; } = new();

    private string? errorMessage;
    private UserModel? user;
    private string? userCountry;
    private bool passwordChangeModal = false;
    private bool countryChangeModal = false;

    /// <summary>
    /// Initializes the component with necessary data, such as the user's current country
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await currencyRepo.GetExchangeRates();

        user = await userRepo.GetLoggedInUser();
        userCountry = user.UserCountry;
        changeUserCountryModel.UserCountry = userCountry;
    }

    /// <summary>
    /// Handles the submission of the change password form
    /// </summary>
    private async Task HandleValidSubmit()
    {
        changePasswordModel.Username = user.Username;
        changeUserCountryModel.Username = user.Username;       

        var passwordChangeSuccessful = await userRepo.ChangeUserPassword(changePasswordModel);

        if (passwordChangeSuccessful)
        {
            passwordChangeModal = true;

        }
        else
        {
            errorMessage = "Your password doesn't match or is not strong enough";
        }

    }

    /// <summary>
    /// Navigates to the home page
    /// </summary>
    private void Confirm()
    {
        navigationManager.NavigateTo("/");
    }

    /// <summary>
    /// Closes the password and country change modals
    /// </summary>
    private void CloseConfirmation()
    {
        passwordChangeModal = false;
        countryChangeModal = false;
    }

    /// <summary>
    /// Handles the submission of change country
    /// </summary>
    private async Task HandleCountrySubmit()
    {
        changeUserCountryModel.Username = user.Username;

        var countryChangeSuccessful = await userRepo.ChangeUserCountry(changeUserCountryModel);

        if (countryChangeSuccessful)
        {
            countryChangeModal = true;
            await userRepo.SetUserCurrency();
            await currencyRepo.SetExchangeRate();
            
        }

    }
}

<style>
    body {
        background-color: #FCE595;
    }

    .container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .card {
        width: 18rem;
        margin: 0 auto;
        border-radius: 20px;
        border-color: black;
        background-color: #305076;
    }

    #input-username {
        width: 200px;
        height: 45px;
        border-radius: 20px;
        border-color: black;
        margin-top: 20px;
        text-align: center
    }

    #old-password-input {
        width: 200px;
        height: 45px;
        border-radius: 20px;
        border-color: black;
        margin-top: 20px;
        text-align: center
    }

    #new-password-input {
        width: 200px;
        height: 45px;
        border-radius: 20px;
        border-color: black;
        margin-top: 20px;
        text-align: center
    }

    .btn-savechanges {
        font-size: 0.9rem;
        min-width: 120px;
        display: inline-block;
        outline: 0;
        border: 0;
        cursor: pointer;
        text-decoration: none;
        position: relative;
        color: #000;
        background: #fff;
        border-radius: 40px;
        font-size: 15px;
        font-weight: 100;
        box-shadow: #fbe89c -2px -2px 0px 2px, #000000 0px 0px 0px 4px, rgba(0, 0, 0, 0.05) 0px 0px 2px 7px;
        transition: all 0.2s;
    }

        .btn-savechanges:hover {
            box-shadow: #000000 0px 0px 0px 4px, #fbe89c 0px 0px 0px 4px, rgba(0, 0, 0, 0.05) 0px 0px 2px 7px;
            transform: scale(1.01);
    }

    #saveCountry-id {
        margin: 10px;
    }

    #savePassword-id{
        margin:10px;
    }

    #input-combobox {
        width: 150px;
        height: 30px;
        border-radius: 20px;
        border-color: black;
        margin-top: 20px;
        text-align: center
    }

    input[type="submit"] {
        width: 80px;
        height: 45px;
        border-radius: 20px;
        border-color: black;
        text-align: center;
        font-size: medium;
        margin: auto;
        transition: all 0.3s;
    }

    input[type="submit"]:hover {
            transform: translateY(-6px);
    }
</style>
